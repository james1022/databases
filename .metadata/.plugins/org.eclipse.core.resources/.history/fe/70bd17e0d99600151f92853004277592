import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

public class MomaArtistParser {
	
	private static final String INPUT_FILE = "artist.csv";
	private static final String OUTPUT_FILE = "artist-table-parsed.csv";
	private static final int NUM_ELEMENTS = 3;

	public static void parse(File inFile, File outFile) throws IOException {
		//Separate the values in the raw file the way we want.
		ArrayList<ArrayList<ArrayList<String>>> tupleList = new ArrayList<>();
		tupleSeparator(tupleList, inFile, outFile);
		
		//Parse the list the way we want.
		ArrayList<ArrayList<String>> ultList = new ArrayList<>();
		for (int i = 0; i < tupleList.size(); i++) {
			parse(ultList, tupleList.get(i));
		}
		
		//Write the result in a csv file
		FileWriter writer = new FileWriter(outFile);
		for (int i = 0; i < ultList.size(); i++) {
			ArrayList<String> oneTuple = ultList.get(i);
			for (int j = 0; j < oneTuple.size() - 1; j++) {
				writer.write(oneTuple.get(j) + ",");
			}
			writer.write(oneTuple.get(oneTuple.size() - 1) + "\n");
		}
		writer.close();
	}
	
	private static void tupleSeparator(ArrayList<ArrayList<ArrayList<String>>> tupleList, 
										File inFile, File outFile) throws IOException {
		Scanner sc = new Scanner(inFile);
		while (sc.hasNextLine()) {
			//Get one tuple. A tuple may possibly have several artists in it.
			ArrayList<ArrayList<String>> artistTuple = new ArrayList<>();
			String line = sc.nextLine().trim();
			int lineLen = line.length();
			int positionStart = 0;
			int positionEnd = 0;
			int index = 0;
			String item = "";
			
			while (positionStart < lineLen && index != NUM_ELEMENTS) {
				ArrayList<String> tupleColumn = new ArrayList<>();
				positionEnd = line.indexOf(',', positionStart);
				if (positionEnd == -1) {
					item = line.substring(positionStart);
				} else {
					item = line.substring(positionStart, positionEnd);
				}
				
				int positionStart1 = 0;
				int positionEnd1 = 0;
				String sbstr;
				
				if (index == 0) { //column 0: artist name
					while (item.substring(positionStart1).contains("|")) {
						positionEnd1 = item.indexOf('|', positionStart1);
						sbstr = item.substring(positionStart1, positionEnd1).trim();
						tupleColumn.add(sbstr);
						positionStart1 = positionEnd1 + 1;
					}
					sbstr = item.substring(positionStart1);
					if (positionStart1 == positionEnd1 && positionStart == lineLen - 1) {
						sbstr = "";
					} else {
						sbstr = sbstr.trim();
					}
					tupleColumn.add(sbstr);
				} else if (index == 1) { //column 1: artist bio
					while (item.substring(positionStart1).contains("(")) {
						positionEnd1 = item.indexOf(')', positionStart1);
						while (item.charAt(positionStart1) == ' ' || item.charAt(positionStart1) == '(') {
							positionStart1++;
						}
						sbstr = item.substring(positionStart1, positionEnd1).trim();
						tupleColumn.add(sbstr);
						positionStart1 = positionEnd1 + 1;
					}
				} else { //column 2: object id (primary key for artwork)
					tupleColumn.add(item);
				}
				
				positionStart = positionEnd + 1;
				artistTuple.add(tupleColumn);
				index++;
			}
			tupleList.add(artistTuple);
		}
		sc.close();
	}
	
	private static void parse(ArrayList<ArrayList<String>> ultList, 
								 ArrayList<ArrayList<String>> artistTuple) {
		//One unprocessed tuple may potentially yield several tuples.
		//So get ready to add several resultant tuples in a wrapping ArrayList.
		ArrayList<ArrayList<String>> tempUltList = new ArrayList<>();
		
		//Some artists have their names listed in the file but no bio.
		//So we need to be able to deal with these cases.
		int numArtistBios = artistTuple.get(1).size();
		int count = 0;
		
		//Iterate to fill in the resultList to be added to our tempUltList.
		for (int i = 0; i < artistTuple.get(0).size(); i++) {
			ArrayList<String> resultList = new ArrayList<>();
			resultList.add(artistTuple.get(0).get(i));
			if (numArtistBios != 0) {
				resultList.add(artistTuple.get(1).get(count++));
				numArtistBios--;
			} else {
				resultList.add(" ");
			}
			resultList.add(artistTuple.get(2).get(0));
			tempUltList.add(resultList);
		}
		
		//Add the newly generated tuples to our original ultimate list.
		ultList.addAll(tempUltList);
	}
	
	public static void main(String args[]) throws IOException {
		File inFile = new File(INPUT_FILE);
		File outFile = new File(OUTPUT_FILE);
		parse(inFile, outFile);
		System.out.println("Parsing successful!");
	}
	
}
